// This code has been generated by the RMConvertor. Please do not attempt any changes


// SDF methods (sdf object sources & modifiers)
float2 GetTexture3DVolumeSdf(float3 p, half color, half3 volumeSize, half volumeAmplifier, half volumePrecision, sampler3D volumeTexture)
{
float result;
half3 volCoords = (p.xyz / volumeSize.xyz + 1.0) * 0.5;
float volTex = RM_SAMPLE_TEXTURE3D(volumeTexture, volCoords).r;
float3 d = abs(p) - volumeSize;
float bsdf = min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0));

result = max(bsdf, 1 - volTex * volumeAmplifier) / max(EPSILONZEROFIVE, volumePrecision / volumeSize.x);
return float2 (result,color);
}


// SDF object variables
struct SdfInstancesContainer
{
half4x4 modelData;
};
StructuredBuffer<SdfInstancesContainer> SdfInstances;
uniform half3 volumeSize0;
uniform half volumeAmplifier0;
uniform half volumePrecision0;
uniform sampler3D volumeTexture0;

float4 SdfObjectBuffer(in float3 p)
{
// SDF object declarations
    float4 obj0 = float4 (GetTexture3DVolumeSdf(RM_TRANS(p,SdfInstances[0].modelData),SdfInstances[0].modelData[3].x,volumeSize0,volumeAmplifier0,volumePrecision0,volumeTexture0),0,0);
// SDF modifier groups

    return obj0;
}
