// This code has been generated by the RMConvertor. Please do not attempt any changes


// SDF methods (sdf object sources & modifiers)
#ifndef Rot
#define Rot(a) float2x2(cos(a),-sin(a),sin(a),cos(a))
#endif
half3 TwistModifier(half3 p, half3 twistTile, half3 twistMultiplier, half3 twistScroll)
{

float3 m0 = lerp(0.0,0.05,twistMultiplier.y);
float3 m1 = lerp(0.0,0.05,twistMultiplier.x);
float3 m2 = lerp(0.0,0.05,twistMultiplier.z);

p.xz += mul(p.xz+5.0, Rot(p.y*twistTile.y+_Time.y*twistScroll.y)) * m0;
p.yz += mul(p.yz+5.0, Rot(p.x*twistTile.x+_Time.y*twistScroll.x)) * m1;
p.xy += mul(p.xy+5.0, Rot(p.z*twistTile.z+_Time.y*twistScroll.z)) * m2;

return p;
}

half2 GetPerspectiveDrivenVolumeSdf(half3 p, half color, half3 volumeSize, half volumeAmplifier, half volumePrecision, sampler2D volumeTextureTop, sampler2D volumeTextureForward, sampler2D volumeTextureRight)
{
half result;
half2 volCoords = (p.xz / volumeSize.xz + 1.0) * 0.5;
float volTexT = RM_SAMPLE_TEXTURE2D(volumeTextureTop, volCoords).r;
volCoords = (p.xy / volumeSize.xy + 1.0) * 0.5;
float volTexF = RM_SAMPLE_TEXTURE2D(volumeTextureForward, volCoords).r;
volCoords = (p.zy / volumeSize.zy + 1.0) * 0.5;
float volTexR = RM_SAMPLE_TEXTURE2D(volumeTextureRight, volCoords).r;

float3 d = abs(p) - volumeSize;
float bsdf = min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0));

float t = 1 - (saturate(volTexT * volTexF * volTexR) * volumeAmplifier);
result = max(bsdf, t) / max(EPSILONZEROFIVE, volumePrecision / volumeSize.x);
return half2 (result,color);
}


// SDF object variables
struct SdfInstancesContainer
{
half4 modelData;
};
StructuredBuffer<SdfInstancesContainer> SdfInstances;
uniform half3 twistTile0;
uniform half3 twistMultiplier0;
uniform half3 twistScroll0;
uniform half3 volumeSize0;
uniform half volumeAmplifier0;
uniform half volumePrecision0;
uniform sampler2D volumeTextureTop0;
uniform sampler2D volumeTextureForward0;
uniform sampler2D volumeTextureRight0;

half2 SdfObjectBuffer(in half3 p)
{
// SDF object declarations
    half2 obj0 = half2 (GetPerspectiveDrivenVolumeSdf(TwistModifier(RM_TRANS(p,SdfInstances[0].modelData.xyz),twistTile0,twistMultiplier0,twistScroll0),SdfInstances[0].modelData.w,volumeSize0,volumeAmplifier0,volumePrecision0,volumeTextureTop0,volumeTextureForward0,volumeTextureRight0));
// SDF modifier groups

    return obj0;
}
