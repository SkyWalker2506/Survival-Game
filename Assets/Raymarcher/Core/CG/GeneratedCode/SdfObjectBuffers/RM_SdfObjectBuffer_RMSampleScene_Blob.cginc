// This code has been generated by the RMConvertor. Please do not attempt any changes


// SDF methods (sdf object sources & modifiers)
float4 FragmentModifier(float sdf, float3 p, half color, half materialType, half materialInstance, half4 fragmentTiling, half3 fragmentScroll)
{
float frg = (sin(fragmentTiling.x * (p.x + _Time.y * fragmentScroll.x))
* sin(fragmentTiling.y * (p.y + _Time.y * fragmentScroll.y))
* sin(fragmentTiling.z * (p.z + _Time.y * fragmentScroll.z))) * fragmentTiling.w;
sdf += frg;
return float4 (sdf,color,materialType,materialInstance);
}

float2 GetSphereSdf(float3 p, half color, half2 sphereSdfData)
{
float result;
p.y -= clamp(p.y, 0.0, sphereSdfData.y);
result = length(p) - sphereSdfData.x;
return float2 (result,color);
}


// SDF object variables
struct SdfInstancesContainer
{
half4x4 modelData;
};
StructuredBuffer<SdfInstancesContainer> SdfInstances;
uniform half4 fragmentTiling0;
uniform half3 fragmentScroll0;
uniform half2 sphereSdfData0;
uniform half4 fragmentTiling1;
uniform half3 fragmentScroll1;
uniform half2 sphereSdfData1;

float4 SdfObjectBuffer(in float3 p)
{
// SDF object declarations
    float4 obj0 = float4 (GetSphereSdf(RM_TRANS(p,SdfInstances[0].modelData),SdfInstances[0].modelData[3].x,sphereSdfData0),0,0);
    obj0 = FragmentModifier(obj0.x,p,obj0.y,obj0.z,obj0.w,fragmentTiling0,fragmentScroll0);
    float4 obj1 = float4 (GetSphereSdf(RM_TRANS(p,SdfInstances[1].modelData),SdfInstances[1].modelData[3].x,sphereSdfData1),0,0);
    obj1 = FragmentModifier(obj1.x,p,obj1.y,obj1.z,obj1.w,fragmentTiling1,fragmentScroll1);
// SDF modifier groups

// Smooth Unions
    float4 objGroup0 = GroupSmoothUnion(obj0,obj1,RaymarcherGlobalSdfObjectSmoothness);
    return objGroup0;
}
