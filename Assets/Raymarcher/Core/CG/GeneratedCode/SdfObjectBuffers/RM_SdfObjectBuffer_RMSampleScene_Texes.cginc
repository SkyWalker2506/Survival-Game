// This code has been generated by the RMConvertor. Please do not attempt any changes
// Upgrade NOTE: excluded shader from OpenGL ES 2.0 because it uses non-square matrices
#pragma exclude_renderers gles


// SDF methods (sdf object sources & modifiers)
float4 GetSphereSdf(float3 p, half3 color, half2 sphereSdfData)
{
float result;
p.y -= clamp(p.y, 0.0, sphereSdfData.y);
result = length(p) - sphereSdfData.x;
return float4 (result,color);
}

float3 DeformModifier(float3 p, half3 DeformData)
{
p.xz *= lerp(1., DeformData.z, smoothstep(DeformData.x - DeformData.y, DeformData.x + DeformData.y, p.y));
return p;
}

float4 GetCubeSdf(float3 p, half3 color, half cubeRoundness, half3 cubeSize)
{
float result;
result = length(max(abs(p) - abs(cubeSize) + cubeRoundness, 0.0)) - cubeRoundness;
return float4 (result,color);
}

float2x4 FragmentModifier(float sdf, float3 p, half3 color, half materialType, half materialInstance, half4 fragmentTiling, half3 fragmentScroll)
{
float frg = (sin(fragmentTiling.x * (p.x + _Time.y * fragmentScroll.x))
* sin(fragmentTiling.y * (p.y + _Time.y * fragmentScroll.y))
* sin(fragmentTiling.z * (p.z + _Time.y * fragmentScroll.z))) * fragmentTiling.w;
sdf += frg;
return float2x4 (sdf,color,materialType,materialInstance,0,0);
}

float4 GetTorusSdf(float3 p, half3 color, half torusThickness, half torusRadius, half torusHeight)
{
float result;
p.y -= clamp(p.y, 0.0, torusHeight);
result = length(float2(length(p.xz) - torusRadius, p.y)) - torusThickness;
return float4 (result,color);
}


// SDF object variables
struct SdfInstancesContainer
{
half4x4 modelData;
half4 textureData;
half4 textureScale;
};
StructuredBuffer<SdfInstancesContainer> SdfInstances;
uniform half2 sphereSdfData0;
uniform half3 DeformData1;
uniform half cubeRoundness1;
uniform half3 cubeSize1;
uniform half4 fragmentTiling2;
uniform half3 fragmentScroll2;
uniform half torusThickness2;
uniform half torusRadius2;
uniform half torusHeight2;

float2x4 SdfObjectBuffer(in float3 p)
{
// SDF object declarations
    float3 localPos = RM_TRANS(p,SdfInstances[0].modelData);
    float2x4 obj0 = float2x4 (GetSphereSdf(localPos,RM_SAMPLE_TEX(localPos,SdfInstances[0].textureData,SdfInstances[0].textureScale,SdfInstances[0].modelData[3]),sphereSdfData0),-1,0,0,0);
    localPos = RM_TRANS(p,SdfInstances[1].modelData);
    float2x4 obj1 = float2x4 (GetCubeSdf(DeformModifier(localPos,DeformData1),RM_SAMPLE_TEX(localPos,SdfInstances[1].textureData,SdfInstances[1].textureScale,SdfInstances[1].modelData[3]),cubeRoundness1,cubeSize1),-1,0,0,0);
    localPos = RM_TRANS(p,SdfInstances[2].modelData);
    float2x4 obj2 = float2x4 (GetTorusSdf(localPos,RM_SAMPLE_TEX(localPos,SdfInstances[2].textureData,SdfInstances[2].textureScale,SdfInstances[2].modelData[3]),torusThickness2,torusRadius2,torusHeight2),-1,0,0,0);
    obj2 = FragmentModifier(obj2[0].x,p,obj2[0].yzw,obj2[1].x,obj2[1].y,fragmentTiling2,fragmentScroll2);
// SDF modifier groups

// Smooth Unions
    float2x4 objGroup0 = GroupSmoothUnion(obj0,obj1,RaymarcherGlobalSdfObjectSmoothness);
    float2x4 objGroup1 = GroupSmoothUnion(objGroup0,obj2,RaymarcherGlobalSdfObjectSmoothness);
    return objGroup1;
}
