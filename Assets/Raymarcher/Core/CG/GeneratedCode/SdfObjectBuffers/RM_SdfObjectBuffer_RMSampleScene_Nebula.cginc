// This code has been generated by the RMConvertor. Please do not attempt any changes


// SDF methods (sdf object sources & modifiers)
float3 xRepeatModifier(float3 p, half spacingx, half scrollx)
{
p.x += scrollx * _Time.y;
float sp = spacingx * 0.5;
p.x = fmod(p.x + sp, spacingx) - sp;
p.x = fmod(p.x - sp, spacingx) + sp;

return p;
}

float3 zRepeatModifier(float3 p, half spacingz, half scrollz)
{
p.z += scrollz * _Time.y;
float sp = spacingz * 0.5;
p.z = fmod(p.z + sp, spacingz) - sp;
p.z = fmod(p.z - sp, spacingz) + sp;

return p;
}

float3 yRepeatModifier(float3 p, half spacingy, half scrolly)
{
p.y += scrolly * _Time.y;
float sp = spacingy * 0.5;
p.y = fmod(p.y + sp, spacingy) - sp;
p.y = fmod(p.y - sp, spacingy) + sp;

return p;
}

float2 GetCubeSdf(float3 p, half color, half cubeRoundness, half3 cubeSize)
{
float result;
result = length(max(abs(p) - abs(cubeSize) + cubeRoundness, 0.0)) - cubeRoundness;
return float2 (result,color);
}


// SDF object variables
struct SdfInstancesContainer
{
half4x4 modelData;
};
StructuredBuffer<SdfInstancesContainer> SdfInstances;
uniform half spacingx0;
uniform half scrollx0;
uniform half spacingz0;
uniform half scrollz0;
uniform half spacingy0;
uniform half scrolly0;
uniform half cubeRoundness0;
uniform half3 cubeSize0;

float4 SdfObjectBuffer(in float3 p)
{
// SDF object declarations
    float4 obj0 = float4 (GetCubeSdf(yRepeatModifier(zRepeatModifier(xRepeatModifier(RM_TRANS(p,SdfInstances[0].modelData),spacingx0,scrollx0),spacingz0,scrollz0),spacingy0,scrolly0),SdfInstances[0].modelData[3].x,cubeRoundness0,cubeSize0),0,0);
// SDF modifier groups

    return obj0;
}
