// This code has been generated by the RMConvertor. Please do not attempt any changes


// SDF methods (sdf object sources & modifiers)
float2 GetCubeSdf(float3 p, half color, half cubeRoundness, half3 cubeSize)
{
float result;
result = length(max(abs(p) - abs(cubeSize) + cubeRoundness, 0.0)) - cubeRoundness;
return float2 (result,color);
}

float4 FragmentModifier(float sdf, float3 p, half color, half materialType, half materialInstance, half4 fragmentTiling, half3 fragmentScroll)
{
float frg = (sin(fragmentTiling.x * (p.x + _Time.y * fragmentScroll.x))
* sin(fragmentTiling.y * (p.y + _Time.y * fragmentScroll.y))
* sin(fragmentTiling.z * (p.z + _Time.y * fragmentScroll.z))) * fragmentTiling.w;
sdf += frg;
return float4 (sdf,color,materialType,materialInstance);
}

float2 GetSphereSdf(float3 p, half color, half2 sphereSdfData)
{
float result;
p.y -= clamp(p.y, 0.0, sphereSdfData.y);
result = length(p) - sphereSdfData.x;
return float2 (result,color);
}


// SDF object variables
struct SdfInstancesContainer
{
half4x4 modelData;
};
StructuredBuffer<SdfInstancesContainer> SdfInstances;
uniform half cubeRoundness0;
uniform half3 cubeSize0;
uniform half cubeRoundness1;
uniform half3 cubeSize1;
uniform half cubeRoundness2;
uniform half3 cubeSize2;
uniform half4 fragmentTiling3;
uniform half3 fragmentScroll3;
uniform half2 sphereSdfData3;

float4 SdfObjectBuffer(in float3 p)
{
// SDF object declarations
    float4 obj0 = float4 (GetCubeSdf(RM_TRANS(p,SdfInstances[0].modelData),SdfInstances[0].modelData[3].x,cubeRoundness0,cubeSize0),-1,0);
    float4 obj1 = float4 (GetCubeSdf(RM_TRANS(p,SdfInstances[1].modelData),SdfInstances[1].modelData[3].x,cubeRoundness1,cubeSize1),-1,0);
    float4 obj2 = float4 (GetCubeSdf(RM_TRANS(p,SdfInstances[2].modelData),SdfInstances[2].modelData[3].x,cubeRoundness2,cubeSize2),-1,0);
    float4 obj3 = float4 (GetSphereSdf(RM_TRANS(p,SdfInstances[3].modelData),SdfInstances[3].modelData[3].x,sphereSdfData3),-1,0);
    obj3 = FragmentModifier(obj3.x,p,obj3.y,obj3.z,obj3.w,fragmentTiling3,fragmentScroll3);
// SDF modifier groups

// Smooth Unions
    float4 objGroup0 = GroupSmoothUnion(obj0,obj1,RaymarcherGlobalSdfObjectSmoothness);
    float4 objGroup1 = GroupSmoothUnion(objGroup0,obj2,RaymarcherGlobalSdfObjectSmoothness);
    float4 objGroup2 = GroupSmoothUnion(objGroup1,obj3,RaymarcherGlobalSdfObjectSmoothness);
    return objGroup2;
}
