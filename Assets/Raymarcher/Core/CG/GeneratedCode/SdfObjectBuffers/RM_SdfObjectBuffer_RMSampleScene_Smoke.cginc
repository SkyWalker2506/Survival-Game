// This code has been generated by the RMConvertor. Please do not attempt any changes


// SDF methods (sdf object sources & modifiers)
half3 NoiserModifier(half3 p, half4 NoiseData)
{
p.x *= lerp(1, HASH1(p.x) * NoiseData.x, NoiseData.w);
p.y *= lerp(1, HASH1(p.y) * NoiseData.y, NoiseData.w);
p.z *= lerp(1, HASH1(p.z) * NoiseData.z, NoiseData.w);
return p;
}

half2 GetTexture3DVolumeSdf(half3 p, half color, half3 volumeSize, half volumeAmplifier, half volumePrecision, sampler3D volumeTexture)
{
half result;
half3 volCoords = (p.xyz / volumeSize.xyz + 1.0) * 0.5;
float volTex = RM_SAMPLE_TEXTURE3D(volumeTexture, volCoords).r;
float3 d = abs(p) - volumeSize;
float bsdf = min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0));

result = max(bsdf, 1 - volTex * volumeAmplifier) / max(EPSILONZEROFIVE, volumePrecision / volumeSize.x);
return half2 (result,color);
}


// SDF object variables
struct SdfInstancesContainer
{
half4 modelData;
};
StructuredBuffer<SdfInstancesContainer> SdfInstances;
uniform half4 NoiseData0;
uniform half3 volumeSize0;
uniform half volumeAmplifier0;
uniform half volumePrecision0;
uniform sampler3D volumeTexture0;
uniform half4 NoiseData1;
uniform half3 volumeSize1;
uniform half volumeAmplifier1;
uniform half volumePrecision1;
uniform sampler3D volumeTexture1;

half2 SdfObjectBuffer(in half3 p)
{
// SDF object declarations
    half2 obj0 = half2 (GetTexture3DVolumeSdf(NoiserModifier(RM_TRANS(p,SdfInstances[0].modelData.xyz),NoiseData0),SdfInstances[0].modelData.w,volumeSize0,volumeAmplifier0,volumePrecision0,volumeTexture0));
    half2 obj1 = half2 (GetTexture3DVolumeSdf(NoiserModifier(RM_TRANS(p,SdfInstances[1].modelData.xyz),NoiseData1),SdfInstances[1].modelData.w,volumeSize1,volumeAmplifier1,volumePrecision1,volumeTexture1));
// SDF modifier groups

// Smooth Unions
    half2 objGroup0 = GroupSmoothUnion(obj0,obj1,RaymarcherGlobalSdfObjectSmoothness);
    return objGroup0;
}
