// This code has been generated by the RMConvertor. Please do not attempt any changes


// SDF methods (sdf object sources & modifiers)
half2 GetApollonianFractalSdf(half3 p, half color, half4 fractalParams)
{
half result;
float sc = 1.0;
half colorProgression = 0.0;
p *= fractalParams.w;
for (int i = 0; i < 8; i++)
{
    p = -1.0 + 2.0 * frac(0.5 * p + 0.5);
    float r2 = dot(p, p);
    colorProgression += lerp(1.0f - colorProgression, (float)(cos(i * 0.5) * pow(r2, 0.5) + 0.15), clamp(fractalParams.z, 0, 1));
    float k = fractalParams.x / r2;
    p *= k;
    p.x *= fractalParams.y;
    sc *= k;
}
color *= colorProgression;
result = (0.25 * abs(p.y) / sc) / fractalParams.w;
return half2 (result,color);
}


// SDF object variables
struct SdfInstancesContainer
{
half4 modelData;
};
StructuredBuffer<SdfInstancesContainer> SdfInstances;
uniform half4 fractalParams0;

half2 SdfObjectBuffer(in half3 p)
{
// SDF object declarations
    half2 obj0 = half2 (GetApollonianFractalSdf(RM_TRANS(p,SdfInstances[0].modelData.xyz),SdfInstances[0].modelData.w,fractalParams0));
// SDF modifier groups

    return obj0;
}
